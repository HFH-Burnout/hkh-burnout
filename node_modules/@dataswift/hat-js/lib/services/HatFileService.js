"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var HatCustomError_1 = require("../utils/HatCustomError");
var HatFileService = /** @class */ (function () {
    function HatFileService(config, headers, httpSvc) {
        this.config = config;
        this.baseUrl = config.hatDomain + "/api/" + config.apiVersion;
        this.headers = headers;
        this.httpSvc = httpSvc;
    }
    HatFileService.prototype.uploadFileWrapper = function (metadata, file, fileType) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var fileMetaDataRes, _a, fileId, contentUrl, fileAWSRes, completeRes, e_1;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (!file)
                                        reject(new HatCustomError_1.HatCustomError(HatCustomError_1.HatCustomErrorCauses.hatFileApi, HatCustomError_1.HatCustomErrorMessages.fileIsUndefined));
                                    _b.label = 1;
                                case 1:
                                    _b.trys.push([1, 7, , 8]);
                                    return [4 /*yield*/, this.uploadFileMetadata(metadata)];
                                case 2:
                                    fileMetaDataRes = _b.sent();
                                    if (!fileMetaDataRes.parsedBody) {
                                        reject(new HatCustomError_1.HatCustomError(HatCustomError_1.HatCustomErrorCauses.hatFileApi, HatCustomError_1.HatCustomErrorMessages.fileFailedToFetchMetadata));
                                        return [2 /*return*/];
                                    }
                                    _a = fileMetaDataRes.parsedBody, fileId = _a.fileId, contentUrl = _a.contentUrl;
                                    if (!contentUrl) {
                                        reject(new HatCustomError_1.HatCustomError(HatCustomError_1.HatCustomErrorCauses.hatFileApi, HatCustomError_1.HatCustomErrorMessages.fileFailedToFetchMetadata));
                                        return [2 /*return*/];
                                    }
                                    return [4 /*yield*/, this.uploadFileToAWS(contentUrl, file, fileType)];
                                case 3:
                                    fileAWSRes = _b.sent();
                                    if (!fileAWSRes.parsedBody) return [3 /*break*/, 5];
                                    return [4 /*yield*/, this.markFileAsComplete(fileId)];
                                case 4:
                                    completeRes = _b.sent();
                                    resolve(completeRes);
                                    return [3 /*break*/, 6];
                                case 5:
                                    reject(new HatCustomError_1.HatCustomError(HatCustomError_1.HatCustomErrorCauses.hatFileApi, HatCustomError_1.HatCustomErrorMessages.fileFailedToUpload));
                                    _b.label = 6;
                                case 6: return [3 /*break*/, 8];
                                case 7:
                                    e_1 = _b.sent();
                                    reject(e_1);
                                    return [3 /*break*/, 8];
                                case 8: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    HatFileService.prototype.uploadFileMetadata = function (metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/upload";
                        return [4 /*yield*/, this.httpSvc.req(path, {
                                method: 'post',
                                headers: this.headers,
                                body: JSON.stringify(metadata),
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.uploadFileToAWS = function (path, file, contentType) {
        return __awaiter(this, void 0, void 0, function () {
            var awsHeaders;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        awsHeaders = {
                            'x-amz-server-side-encryption': 'AES256',
                            'Content-Type': contentType || 'image/png',
                        };
                        return [4 /*yield*/, this.httpSvc.req(path, { method: 'put', headers: awsHeaders, body: file })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.markFileAsComplete = function (fileId) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/file/" + fileId + "/complete";
                        return [4 /*yield*/, this.httpSvc.req(path, { method: 'put', headers: this.headers })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.markFileAsPublic = function (fileId) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/allowAccessPublic/" + fileId;
                        return [4 /*yield*/, this.httpSvc.req(path, { method: 'get', headers: this.headers })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.markFileAsPrivate = function (fileId) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/restrictAccessPublic/" + fileId;
                        return [4 /*yield*/, this.httpSvc.req(path, { method: 'get', headers: this.headers })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.updateFileParameters = function (fileId, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/file/" + fileId;
                        return [4 /*yield*/, this.httpSvc.req(path, {
                                method: 'put',
                                headers: this.headers,
                                body: JSON.stringify(metadata),
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.searchFiles = function (metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/search";
                        return [4 /*yield*/, this.httpSvc.req(path, {
                                method: 'post',
                                headers: this.headers,
                                body: JSON.stringify(metadata),
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.deleteFile = function (fileId) {
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = this.baseUrl + "/files/file/" + fileId;
                        return [4 /*yield*/, this.httpSvc.req(path, { method: 'delete', headers: this.headers })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    HatFileService.prototype.generateFileContentUrl = function (fileId) {
        return this.baseUrl + "/files/content/" + fileId;
    };
    return HatFileService;
}());
exports.HatFileService = HatFileService;
