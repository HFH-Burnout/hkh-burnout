"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HatTokenValidation_1 = require("./utils/HatTokenValidation");
var Utils_1 = require("./utils/Utils");
var State = /** @class */ (function () {
    function State(state) {
        this.apiVersion = '';
        this.hatDomain = '';
        this.token = '';
        this.secure = true;
        this.authenticated = false;
        this.observers = [];
        this.validateConfig(state);
    }
    State.prototype.setToken = function (token) {
        this.token = token;
        this.notifyObservers();
    };
    State.prototype.signOut = function () {
        this.apiVersion = '';
        this.hatDomain = '';
        this.token = '';
        this.secure = true;
        this.authenticated = false;
        this.notifyObservers();
    };
    State.prototype.addObserver = function (o) {
        this.observers.push(o);
    };
    State.prototype.notifyObservers = function () {
        for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
            var obs = _a[_i];
            obs.update(this);
        }
    };
    State.prototype.validateConfig = function (config) {
        var _this = this;
        var apiVersion = config.apiVersion, token = config.token, secure = config.secure;
        if (!token) {
            return;
        }
        if (config.onTokenChange) {
            this.onTokenChange = config.onTokenChange;
        }
        if (apiVersion) {
            this.apiVersion = apiVersion;
        }
        HatTokenValidation_1.HatTokenValidation.validateToken(token)
            .then(function (decodedToken) {
            _this.authenticated = true;
            if (secure === false) {
                _this.secure = secure;
            }
            var httpProtocol = Utils_1.Utils.getProtocol(secure);
            _this.hatDomain = "" + (httpProtocol + decodedToken.iss);
            _this.token = token;
            _this.notifyObservers();
        })
            .catch(function (err) {
            throw err;
        });
    };
    return State;
}());
exports.State = State;
